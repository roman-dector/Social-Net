{"version":3,"file":"static/js/540.734b0550.chunk.js","mappings":"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","sources":["views/components/Login/Login.tsx","webpack://social-net/./src/views/components/Login/LoginForm.module.scss?17a3","views/validationSchemas/validationFields.js","views/components/Login/LoginForm.tsx"],"sourcesContent":["import { FC } from 'react'\nimport { Navigate } from 'react-router-dom'\nimport { connect } from 'react-redux'\n\nimport {\n  selectIsUserAuthed,\n  selectIsAuthenticating,\n  selectCaptchaUrl,\n} from '../../../redux/ducks/auth/selectors'\nimport { login } from '../../../redux/ducks/auth/operations'\nimport { setIsAuthenticating } from '../../../redux/ducks/auth/actions'\n\nimport LoginForm from './LoginForm'\nimport { AppThunk, RootState } from '../../../redux/store'\nimport { LoginDataType } from '../../../redux/ducks/auth/types'\nimport {\n  WrongCredentialsError,\n  WrongCaptchaError,\n} from '../../../dal/apiErrors'\n\ntype MapStateToPopsType = {\n  isUserAuthed: boolean\n  isAuthenticating: boolean\n  captchaUrl: string | null\n}\ntype MapDispatchToPopsType = {\n  setIsAuthenticating: (status: boolean) => void\n  login: ({\n    email,\n    password,\n    rememberMe,\n    captcha,\n  }: LoginDataType) => Promise<void | WrongCaptchaError | WrongCredentialsError>\n}\ntype LoginPropsType = MapStateToPopsType & MapDispatchToPopsType\n\nconst Login: FC<LoginPropsType> = props => {\n  if (props.isUserAuthed) return <Navigate replace to='/profile' />\n\n  return (\n    <LoginForm\n      login={props.login}\n      isAuthenticating={props.isAuthenticating}\n      setIsAuthenticating={props.setIsAuthenticating}\n      captchaUrl={props.captchaUrl}\n    />\n  )\n}\n\nconst mapStateToPops = (state: RootState): MapStateToPopsType => ({\n  isUserAuthed: selectIsUserAuthed(state),\n  isAuthenticating: selectIsAuthenticating(state),\n  captchaUrl: selectCaptchaUrl(state),\n})\n\nexport default connect(mapStateToPops, { login, setIsAuthenticating })(Login)\n","// extracted by mini-css-extract-plugin\nexport default {\"loginFormContainer\":\"LoginForm_loginFormContainer__lGv0-\",\"email\":\"LoginForm_email__wKrxY\",\"password\":\"LoginForm_password__ar8G6\",\"rememberMe\":\"LoginForm_rememberMe__BLxLx\",\"submit\":\"LoginForm_submit__6RQ3W\",\"fieldError\":\"LoginForm_fieldError__89AQx\",\"formErrorContainer\":\"LoginForm_formErrorContainer__0t0mA\",\"formError\":\"LoginForm_formError__t01At\",\"captcha\":\"LoginForm_captcha__f-btY\",\"captchaImgContainer\":\"LoginForm_captchaImgContainer__Ls2P3\"};","import * as yup from 'yup';\n\nconst validate = {\n  emailRequired: () => yup.string().email().required(),\n\n  passRequired: length => yup.string().min(parseInt(length)).required(),\n};\n\nexport { validate };\n","import styles from './LoginForm.module.scss'\n\nimport { FC, useState } from 'react'\nimport { FieldError, SubmitHandler, useForm } from 'react-hook-form'\nimport { yupResolver } from '@hookform/resolvers/yup'\nimport * as yup from 'yup'\n\nimport { validate } from '../../validationSchemas/validationFields'\nimport { LoginDataType } from '../../../redux/ducks/auth/types'\nimport {\n  WrongCredentialsError,\n  WrongCaptchaError,\n} from '../../../dal/apiErrors'\nimport { AppThunk } from '../../../redux/store'\n\nconst validationSchema = yup.object({\n  email: validate.emailRequired(),\n  password: validate.passRequired(4),\n})\n\ntype LoginFormPropsType = {\n  isAuthenticating: boolean\n  captchaUrl: string | null\n  setIsAuthenticating: (status: boolean) => void\n  login: (\n    data: LoginDataType\n  ) => Promise<void | WrongCaptchaError | WrongCredentialsError>\n}\n\nconst LoginForm: FC<LoginFormPropsType> = props => {\n  const {\n    register,\n    handleSubmit,\n    formState: { errors, touchedFields },\n  } = useForm<LoginDataType>({\n    mode: 'onChange',\n    resolver: yupResolver(validationSchema),\n  })\n\n  let [formError, setFormError] = useState({ type: '', message: '' })\n\n  const onSubmit: SubmitHandler<LoginDataType> = data => {\n    props.setIsAuthenticating(true)\n    props\n      .login(data)\n      .then(() => {\n        setFormError({ type: '', message: '' })\n      })\n      .catch(e => {\n        setFormError({ type: 'server', message: e.message })\n      })\n      .then(() => {\n        props.setIsAuthenticating(false)\n      })\n  }\n  return (\n    <div className={styles.loginFormContainer}>\n      <form onSubmit={handleSubmit(onSubmit)}>\n        <div className={styles.email}>\n          <label>Email:</label>\n          <input {...register('email')} />\n          <FieldErrorMessage\n            error={errors.email}\n            touched={touchedFields.email}\n          />\n        </div>\n\n        <div className={styles.password}>\n          <label>Password:</label>\n          <input {...register('password')} type={'password'} />\n          <FieldErrorMessage\n            error={errors.password}\n            touched={touchedFields.password}\n          />\n        </div>\n\n        <div className={styles.rememberMe}>\n          <input {...register('rememberMe')} type={'checkbox'} />\n          <label>remember me</label>\n        </div>\n\n        {!props.captchaUrl ? null : (\n          <div className={styles.captcha}>\n            <div className={styles.captchaImgContainer}>\n              <img src={props.captchaUrl} alt='captcha image' />\n            </div>\n            <input {...register('captcha')} />\n          </div>\n        )}\n\n        <FormErrorMessage error={formError} />\n\n        <div className={styles.submit}>\n          <button type='submit' disabled={props.isAuthenticating}>\n            Log In\n          </button>\n        </div>\n      </form>\n    </div>\n  )\n}\n\ntype FormErrorType = {\n  type: string\n  message: string\n}\n\nexport const FieldErrorMessage = ({\n  error,\n  touched,\n  style\n}: {\n  error?: FieldError\n  touched?: boolean\n  style?: Object\n}) => {\n  if (error && touched) {\n    let errorMessage = error.message?.split(' ').splice(1).join(' ')\n    return <p style={style ? style : {}} className={styles.fieldError}>{errorMessage}</p>\n  } else return null\n}\n\nexport const FormErrorMessage = ({ error, style }: { error: FormErrorType, style?: Object }) => {\n  return error.message ? (\n    <div className={styles.formErrorContainer}>\n      <p style={style ? style : {}} className={styles.formError}>{error.message}</p>\n    </div>\n  ) : null\n}\n\nexport default LoginForm\n"],"names":["connect","state","isUserAuthed","selectIsUserAuthed","isAuthenticating","selectIsAuthenticating","captchaUrl","selectCaptchaUrl","login","setIsAuthenticating","props","replace","to","validate","yup","email","required","length","min","parseInt","validationSchema","password","FieldErrorMessage","error","touched","style","errorMessage","message","split","splice","join","className","styles","FormErrorMessage","useForm","mode","resolver","yupResolver","register","handleSubmit","formState","errors","touchedFields","useState","type","formError","setFormError","onSubmit","data","then","catch","e","src","alt","disabled"],"sourceRoot":""}